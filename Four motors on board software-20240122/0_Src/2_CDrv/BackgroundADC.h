/**********************************************************************************************************************
 * \file ADC_Filtering.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef ADC_FILTERING_H_
#define ADC_FILTERING_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxAsclin_Asc.h"
#include "IfxVadc_Adc.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

#define AN35_G4C3                  0   /* u IIR Position of channel 3 of group 4 (AN35) on the array of ADC channels            */
#define AN38_G4C6                  1   /* w FIR Position of channel 6 of group 4 (AN38) on the array of ADC channels            */
#define AN39_G4C7                  2   /* v Average Position of channel 7 of group 4 (AN39) on the array of ADC channels            */

#define AN36_G4C4                  3   /* Position of channel 4 of group 4 (AN36) on the array of ADC channels            */

/* The results stored in the registers with data modification enabled must be divided by a factor, which depends on the
 * Data Modification Mode and its coefficients.
 */
#define DIV_FACTOR_AVRG     4   /* Divider factor for AN39: 4 accumulated conversions lead to a gain of 4           */
#define DIV_FACTOR_FIR      3   /* Gain of the FIR filter (The DC gain is equal to the sum of its coefficients)     */
#define DIV_FACTOR_IIR      4   /* Gain of the IIR filter (The selectable IIR coefficients lead to a gain of 4)     */

#define VADC_MAX            4095            /* Maximum value (conversion results are expressed in 12-bit format)    */
#define VADC_MIN            0               /* Minimum value of a conversion result                                 */
#define VAREF_VOLTAGE       5.0             /* Maximum voltage measurable by the VADC                               */
#define VOLT_CONVERSION     VAREF_VOLTAGE / VADC_MAX  /* Conversion factor from ADC value to voltage (V)            */
#define VOLT_GAIN           30.0              /*Current or Voltage amplification*/
#define RESISTANCE_VALUE    4000            /*The reciprocal of the sampled resistance value @1/R*/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN IfxVadc_Adc g_vadc;                      /* Global variable for configuring the VADC module          */
IFX_EXTERN IfxVadc_Adc_Group g_vadcGroup;           /* Global variable  for configuring the VADC group          */
IFX_EXTERN IfxVadc_Adc_Channel g_vadcChannel[3];    /* Global array for configuring the VADC channels           */

extern IfxStdIf_DPipe g_stdInterface;       /* Global variable for configuring the standard interface, extern in
                                             * order to be used in the Cpu0_Main.c file                             */
extern uint16 BC_current_AD;
/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
/* Structure to store the selected channel and its assigned result register */
typedef struct
{
    IfxVadc_Vadcg_In *analogInput;
    IfxVadc_ChannelResult resultRegister;
} channel;

/* Structure to store the processed values of the conversions */
typedef struct
{
    uint16 currentValue;
    uint16 max;
    uint16 min;
} measureStats;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
/* Functions used to interface the VADC */
void InitCurrentADC_BCMode(void);                                     /* Function to initialize the VADC module                   */
uint16 readADCValue(uint8 channel);                     /* Function to read the VADC measurement                    */

#endif /* ADC_FILTERING_H_ */
