/**********************************************************************************************************************
 * \file SPI_CPU.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SPI_ENCODER.h"

#include "IfxPort.h"
#include "IfxStm.h"
#include "IfxGpt12_regdef.h"
#include "IfxGpt12_reg.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* QSPI modules */

//#define QSPI1_MASTER                &MODULE_QSPI1   /* SPI Master module                                            */
#define QSPI3_MASTER                 &MODULE_QSPI3
#define QSPI3_SLAVE                 &MODULE_QSPI3   /* SPI Slave module                                             */

/* LED port pin */
//#define CSPin                       &MODULE_P10,5
#define CSPin                        &MODULE_P33,10

#define MASTER_CHANNEL_BAUDRATE     800000         /* Master channel baud rate                                     */

/* Interrupt Service Routine priorities for Master and Slave SPI communication */
#define ISR_PRIORITY_MASTER_TX      50
#define ISR_PRIORITY_MASTER_RX      51
#define ISR_PRIORITY_MASTER_ER      52
#define ISR_PRIORITY_SLAVE_TX       53
#define ISR_PRIORITY_SLAVE_RX       54
#define ISR_PRIORITY_SLAVE_ER       55

//#define ISR_PRIORITY_MASTER_TX      3
//#define ISR_PRIORITY_MASTER_RX      4
//#define ISR_PRIORITY_MASTER_ER      5
//#define ISR_PRIORITY_SLAVE_TX       6
//#define ISR_PRIORITY_SLAVE_RX       7
//#define ISR_PRIORITY_SLAVE_ER       8

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
qspiComm g_qspi;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initQSPI3Master(void);
void initQSPI3MasterChannel(void);
void initQSPI3MasterBuffers(void);
void initQSPI3Slave(void);
void initQSPI3SlaveBuffers(void);
void initQSPI(void);


/*********************************************************************************************************************/
/*----------------------------------------------Function Implementations---------------------------------------------*/
/*********************************************************************************************************************/
IFX_INTERRUPT(masterTxISR, 0, ISR_PRIORITY_MASTER_TX);                  /* SPI Master ISR for transmit data         */
IFX_INTERRUPT(masterRxISR, 0, ISR_PRIORITY_MASTER_RX);                  /* SPI Master ISR for receive data          */
IFX_INTERRUPT(masterErISR, 0, ISR_PRIORITY_MASTER_ER);                  /* SPI Master ISR for error                 */
IFX_INTERRUPT(slaveTxISR, 0, ISR_PRIORITY_SLAVE_TX);                    /* SPI Slave ISR for transmit data          */
IFX_INTERRUPT(slaveRxISR, 0, ISR_PRIORITY_SLAVE_RX);                    /* SPI Slave ISR for receive data           */
IFX_INTERRUPT(slaveErISR, 0, ISR_PRIORITY_SLAVE_ER);                    /* SPI Slave ISR for error                  */

void masterTxISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiMaster_isrTransmit(&g_qspi.spiMaster);
}

void masterRxISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiMaster_isrReceive(&g_qspi.spiMaster);
}

void masterErISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiMaster_isrError(&g_qspi.spiMaster);
}

void slaveTxISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiSlave_isrTransmit(&g_qspi.spiSlave);
}

void slaveRxISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiSlave_isrReceive(&g_qspi.spiSlave);
}

void slaveErISR()
{
    IfxCpu_enableInterrupts();
    IfxQspi_SpiSlave_isrError(&g_qspi.spiSlave);
}

/* QSPI Master initialization
 * This function initializes the QSPI1 module in Master mode.
 */
void initQSPI3Master(void)
{
    IfxQspi_SpiMaster_Config spiMasterConfig;                           /* Define a Master configuration            */

//    IfxQspi_SpiMaster_initModuleConfig(&spiMasterConfig, QSPI1_MASTER); /* Initialize it with default values        */
    IfxQspi_SpiMaster_initModuleConfig(&spiMasterConfig, QSPI3_MASTER);

    spiMasterConfig.base.mode = SpiIf_Mode_master;                      /* Configure the mode                       */

    /* Select the port pins for communication */
    const IfxQspi_SpiMaster_Pins qspi3MasterPins = {
//        &IfxQspi1_SCLK_P10_2_OUT, IfxPort_OutputMode_pushPull,          /* SCLK Pin                       (CLK)     */
//        &IfxQspi1_MTSR_P10_3_OUT, IfxPort_OutputMode_pushPull,          /* MasterTransmitSlaveReceive pin (MOSI)    */
//        &IfxQspi1_MRSTA_P10_1_IN, IfxPort_InputMode_pullDown,           /* MasterReceiveSlaveTransmit pin (MISO)    */
        &IfxQspi3_SCLK_P33_11_OUT, IfxPort_OutputMode_pushPull,           /* SCLK Pin                       (CLK)     */
        &IfxQspi3_MTSR_P33_12_OUT, IfxPort_OutputMode_pushPull,           /* MasterTransmitSlaveReceive pin (MOSI)    */
        &IfxQspi3_MRSTD_P33_13_IN, IfxPort_InputMode_pullDown,          /* MasterReceiveSlaveTransmit pin (MISO)    */
        IfxPort_PadDriver_cmosAutomotiveSpeed3                          /* Pad driver mode                          */
    };
    spiMasterConfig.pins = &qspi3MasterPins;                            /* Assign the Master's port pins            */

    /* Set the ISR priorities and the service provider */
    spiMasterConfig.base.txPriority = ISR_PRIORITY_MASTER_TX;
    spiMasterConfig.base.rxPriority = ISR_PRIORITY_MASTER_RX;
    spiMasterConfig.base.erPriority = ISR_PRIORITY_MASTER_ER;
    spiMasterConfig.base.isrProvider = IfxSrc_Tos_cpu0;

    /* Initialize the QSPI Master module */
    IfxQspi_SpiMaster_initModule(&g_qspi.spiMaster, &spiMasterConfig);
}

/* QSPI Master channel initialization
 * This function initializes the QSPI1 Master channel.
 */
void initQSPI3MasterChannel(void)
{
    IfxQspi_SpiMaster_ChannelConfig spiMasterChannelConfig;             /* Define a Master Channel configuration    */

    /* Initialize the configuration with default values */
    IfxQspi_SpiMaster_initChannelConfig(&spiMasterChannelConfig, &g_qspi.spiMaster);

    spiMasterChannelConfig.base.baudrate = MASTER_CHANNEL_BAUDRATE;     /* Set SCLK frequency to 1 MHz              */
    spiMasterChannelConfig.base.mode.dataHeading = SpiIf_DataHeading_msbFirst;
    spiMasterChannelConfig.base.mode.dataWidth = 16;
    spiMasterChannelConfig.base.mode.shiftClock = 1;// 相位
    spiMasterChannelConfig.base.mode.clockPolarity = 0; //极性
    spiMasterChannelConfig.base.mode.autoCS=0;

    /* Select the port pin for the Chip Select signal */
    const IfxQspi_SpiMaster_Output qspi3SlaveSelect = {                 /* QSPI1 Master selects the QSPI3 Slave     */
//        &IfxQspi1_SLSO9_P10_5_OUT, IfxPort_OutputMode_pushPull,         /* Slave Select port pin (CS)               */
        &IfxQspi3_SLSO11_P33_10_OUT, IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1                          /* Pad driver mode                          */
    };
    spiMasterChannelConfig.sls.output = qspi3SlaveSelect;

    /* Initialize the QSPI Master channel */
    IfxQspi_SpiMaster_initChannel(&g_qspi.spiMasterChannel, &spiMasterChannelConfig);
}

/* QSPI Master SW buffer initialization
 * This function initializes SW buffers the Master uses.
 */
void initQSPI3MasterBuffers(void)
{
    for (uint8 i = 0; i < SPI_BUFFER_SIZE; i++)
    {
        g_qspi.spiBuffers.spiMasterTxBuffer[i] = (uint8)(i + 1);        /* Fill TX Master Buffer with pattern       */
        g_qspi.spiBuffers.spiMasterRxBuffer[i] = 0;                     /* Clear RX Buffer                          */
    }
}

/* QSPI Slave initialization
 * This function initializes the QSPI3 module in Slave mode.
 */
void initQSPI3Slave(void)
{
    IfxQspi_SpiSlave_Config spiSlaveConfig;                             /* Define the Slave configuration           */

    IfxQspi_SpiSlave_initModuleConfig(&spiSlaveConfig, QSPI3_SLAVE);    /* Initialize it with default values        */

    /* Select the port pins for communication */
    const IfxQspi_SpiSlave_Pins qspi3SlavePins = {
        &IfxQspi3_SCLKA_P02_7_IN, IfxPort_InputMode_pullDown,           /* SCLK Pin                       (CLK)     */
        &IfxQspi3_MTSRA_P02_6_IN, IfxPort_InputMode_pullDown,           /* MasterTransmitSlaveReceive pin (MOSI)    */
        &IfxQspi3_MRST_P02_5_OUT, IfxPort_OutputMode_pushPull,          /* MasterReceiveSlaveTransmit pin (MISO)    */
        &IfxQspi3_SLSIA_P02_4_IN, IfxPort_InputMode_pullDown,           /* SlaveSelect Pin                (CS)      */
        IfxPort_PadDriver_cmosAutomotiveSpeed3                          /* Pad driver mode                          */
    };
    spiSlaveConfig.pins = &qspi3SlavePins;                              /* Assign Slave port pins                   */

    /* Set the ISR priorities and the service provider */
    spiSlaveConfig.base.txPriority = ISR_PRIORITY_SLAVE_TX;
    spiSlaveConfig.base.rxPriority = ISR_PRIORITY_SLAVE_RX;
    spiSlaveConfig.base.erPriority = ISR_PRIORITY_SLAVE_ER;
    spiSlaveConfig.base.isrProvider = IfxSrc_Tos_cpu0;

    /* Initialize QSPI Slave module */
    IfxQspi_SpiSlave_initModule(&g_qspi.spiSlave, &spiSlaveConfig);
}

/* QSPI Slave SW buffer initialization
 * This function initializes the software buffers that are used by the Slave.
 */
void initQSPI3SlaveBuffers(void)
{
    for (uint8 i = 0; i < SPI_BUFFER_SIZE; i++)
    {
        g_qspi.spiBuffers.spiSlaveTxBuffer[i] = 0;                      /* Clear TX Slave Buffer                    */
        g_qspi.spiBuffers.spiSlaveRxBuffer[i] = 0;                      /* Clear RX Slave Buffer                    */
    }
}

/* This function initialize the QSPI modules */
void initQSPI(void)
{
    /* Firstly initialize the Slave */
    initQSPI3Slave();
    initQSPI3SlaveBuffers();

    /* Secondly initialize the Master */
    initQSPI3Master();
    initQSPI3MasterChannel();
    initQSPI3MasterBuffers();
}

/* This function to initialize the QSPI modules and the LED */

//void initPeripherals(void)
//{
//    initQSPI();
//}

/* This function starts the data transfer */
void transferData(void)
{
    IfxPort_setPinModeOutput(CSPin, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinLow(CSPin);

        uint32 ticks = IfxStm_getTicksFromMilliseconds(&MODULE_STM0, 10);
        IfxStm_waitTicks(&MODULE_STM0, ticks);

        g_qspi.spiBuffers.spiMasterTxBuffer[0] = 0xFFFF;
        //g_qspi.spiBuffers.spiMasterTxBuffer[1] = 0xFF;

//        for(int i = 0; i < 1; i++)
        {
            while(IfxQspi_SpiMaster_getStatus(&g_qspi.spiMasterChannel) == SpiIf_Status_busy);

            IfxQspi_SpiMaster_exchange(&g_qspi.spiMasterChannel, &g_qspi.spiBuffers.spiMasterTxBuffer[0],  &g_qspi.spiBuffers.spiSlaveRxBuffer[0], 1);
            while(IfxQspi_SpiMaster_getStatus(&g_qspi.spiMasterChannel) == SpiIf_Status_busy);
        }

        IfxPort_setPinModeOutput(CSPin, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
        IfxPort_setPinHigh(CSPin);
//
//        ticks = IfxStm_getTicksFromMilliseconds(&MODULE_STM0, 10);
//        IfxStm_waitTicks(&MODULE_STM0, ticks);

}

void  SpiEncoder_init(void)
{
    initQSPI();
}

sint16 Encoder_StartPosition;
sint16 SPIEncoderInitPosition(void)
{
    Ifx_GPT12 *gpt12=&MODULE_GPT120;

    transferData();
    Encoder_StartPosition = (g_qspi.spiBuffers.spiSlaveRxBuffer[0] & 0x3FFF);
    Encoder_StartPosition /=16;
    Encoder_StartPosition %=1024;
    Encoder_StartPosition =1024-Encoder_StartPosition;


    IfxCpu_disableInterrupts();
    gpt12->T2.U=Encoder_StartPosition;
    IfxCpu_enableInterrupts();

    return Encoder_StartPosition;
}

//sint16 SpiEncoder_getInitPos(void)
//{
//    sint16 s16EncoderInitPos = 0;
//
//    transferData();
//
//
//    s16EncoderInitPos = (g_qspi.spiBuffers.spiSlaveRxBuffer[0] & 0x3FFF)/16;
//    return s16EncoderInitPos;
//
//
//}
