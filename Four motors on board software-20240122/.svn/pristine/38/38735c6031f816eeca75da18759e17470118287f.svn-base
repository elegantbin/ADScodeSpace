/********************************************************************************************************************
 * \file MULTICAN.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include <EncoderGpt12.h>
#include "MULTICAN.h"
#include "IfxCpu_Intrinsics.h"
#include "IfxGpt12_reg.h"
#include "AppTorqueControl.h"
#include "Configuration.h"
#include "ConfigurationISR.h"
#include "MotorMgtSwc.h"
#include "ADC.h"
#include "spi_encoder.h"
#include "Duty_control_ADC.h"
#include "velocityPI.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
 AppMulticanType   g_multican;                               /* Global MULTICAN configuration and control structure   */
  extern qspiComm g_qspi;
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/

/* Macro to define Interrupt Service Routine.
 * This macro:
 * - defines linker section as .intvec_tc<vector number>_<interrupt priority>.
 * - defines compiler specific attribute for the interrupt functions.
 * - defines the Interrupt service routine as ISR function.
 *
 * IFX_INTERRUPT(isr, vectabNum, priority)
 *  - isr: Name of the ISR function.
 *  - vectabNum: Vector table number.
 *  - priority: Interrupt priority. Refer Usage of Interrupt Macro for more details.
 */
IFX_INTERRUPT(canIsrTxHandler, 0, ISR_PRIORITY_CAN_TX);
IFX_INTERRUPT(canIsrRxHandler, 0, ISR_PRIORITY_CAN_RX);

/* Interrupt Service Routine (ISR) called once the TX interrupt has been generated.
 * Turns on the LED1 to indicate successful CAN message transmission.
 */



void canIsrTxHandler(void)
{
    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    //IfxPort_setPinLow(g_led.led1.port, g_led.led1.pinIndex);

    Ifx__NOP(1);
}

/* Interrupt Service Routine (ISR) called once the RX interrupt has been generated.
 * Compares the content of the received CAN message with the content of the transmitted CAN message
 * and in case of success, turns on the LED2 to indicate successful CAN message reception.
 */
void canIsrRxHandler(void)
{
    IfxMultican_Status readStatus;

    /* Read the received CAN message and store the status of the operation */



#if(CAN_PINMAP_MDA48VBLDC_CAN0==1)
    readStatus = IfxMultican_Can_MsgObj_readMessage(&g_multican.canSrcMsgObjRx, &g_multican.rxSrcMsg);

    if(g_multican.rxSrcMsg.id==CAN_MESSAGE_RXD_ID01)
    {
          g_bldc.cmd=(enMotorCmd)(g_multican.rxSrcMsg.data[0]);
//          g_bldc.duty=(uint8)(g_multican.rxSrcMsg.data[0]>>8);
          g_bldc.Refspeed = (uint16)(g_multican.rxSrcMsg.data[0]>>16);
          g_bldc.RefCurrent = (uint16)(g_multican.rxSrcMsg.data[1]);

    }
#endif

#if(CAN_PINMAP_TC275LITE_KIT_CAN==1)
    readStatus = IfxMultican_Can_MsgObj_readMessage(&g_multican.canDstMsgObjRx, &g_multican.rxDstMsg);

    if(g_multican.rxDstMsg.id==CAN_MESSAGE_RXD_ID01)
    {
          g_bldc.cmd=(uint8)(g_multican.rxDstMsg.data[0]);
          g_bldc.duty=(uint8)(g_multican.rxDstMsg.data[0]>>8);
    }
#endif

    //blinkLED1();
    /* If no new data has been received, report an error */
    if( !( readStatus & IfxMultican_Status_newData ) )
    {
        //while(1)
        {

        }
    }

    /* If new data has been received but with one message lost, report an error */
    if( readStatus == IfxMultican_Status_newDataButOneLost )
    {
        //while(1)
        {

        }
    }

    /* Finally, check if the received data matches with the transmitted one */
  /*  if( ( g_multican.rxMsg.data[0] == g_multican.txMsg.data[0] ) &&
        ( g_multican.rxMsg.data[1] == g_multican.txMsg.data[1] ) &&
        ( g_multican.rxMsg.id == g_multican.txMsg.id ) )
    {

    }
*/
}

/* Function to initialize MULTICAN module, nodes and message objects related for this application use case */

void initMultican(void)
{

    /* ==========================================================================================
     * CAN module configuration and initialization:
     * ==========================================================================================
     *  - load default CAN module configuration into configuration structure
     *
     *  - define the interrupt priority for both interrupt node pointers used in the example
     *
     *  - initialize CAN module with the modified configuration
     * ==========================================================================================
     */
    IfxMultican_Can_initModuleConfig(&g_multican.canConfig, &MODULE_CAN);

    g_multican.canConfig.nodePointer[TX_INTERRUPT_SRC_ID].priority = ISR_PRIORITY_CAN_TX;
    g_multican.canConfig.nodePointer[RX_INTERRUPT_SRC_ID].priority = ISR_PRIORITY_CAN_RX;

    IfxMultican_Can_initModule(&g_multican.can, &g_multican.canConfig);

#if(CAN_PINMAP_MDA48VBLDC_CAN0==1)
    {
        /* ==========================================================================================
         * Source CAN node configuration and initialization:
         * ==========================================================================================
         *  - load default CAN node configuration into configuration structure
         *
         *  - set source CAN node in the "Loop-Back" mode (no external pins will be used)
         *  - assign source CAN node to CAN node 0
         *
         *  - initialize the source CAN node with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_Node_initConfig(&g_multican.canNodeConfig, &g_multican.can);

#if(CAN_LOOPBACK_MODE)
         g_multican.canNodeConfig.loopBackMode = TRUE;
#endif

          g_multican.canNodeConfig.nodeId = IfxMultican_NodeId_2;
          g_multican.canNodeConfig.rxPin  = &IfxMultican_RXD2B_P02_3_IN;
          g_multican.canNodeConfig.txPin  = &IfxMultican_TXD2_P02_2_OUT;


        g_multican.canNodeConfig.baudrate = 500000;        //波特率设置为500kBaud
        IfxMultican_Can_Node_init(&g_multican.canSrcNode, &g_multican.canNodeConfig);

        /* ==========================================================================================
         * Source message object configuration and initialization:
         * ==========================================================================================
         *  - load default CAN message object configuration into configuration structure
         *
         *  - define the message object ID
         *  - define the CAN message ID used during arbitration phase
         *  - define the message object as a transmit message object
         *  - enable interrupt generation in case of CAN message transmission
         *  - define interrupt node pointer to be used
         *
         *  - initialize the source CAN message object with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canSrcNode);

        g_multican.canMsgObjConfig.msgObjId = SRC_MESSAGE_OBJECT_TX_ID;
        g_multican.canMsgObjConfig.messageId = CAN_MESSAGE_TXD_ID01;
        g_multican.canMsgObjConfig.frame = IfxMultican_Frame_transmit;
        g_multican.canMsgObjConfig.txInterrupt.enabled = FALSE;
        g_multican.canMsgObjConfig.control.extendedFrame = TRUE;
        g_multican.canMsgObjConfig.txInterrupt.srcId = TX_INTERRUPT_SRC_ID;

        IfxMultican_Can_MsgObj_init(&g_multican.canSrcMsgObjTx, &g_multican.canMsgObjConfig);

        /* ==========================================================================================
         * Rx message object configuration and initialization:
         * ==========================================================================================
         *  - load default CAN message object configuration into configuration structure
         *
         *  - define the message object ID (different than the ID used for source MO)
         *  - define the CAN message ID used during arbitration phase (same as ID used for source MO)
         *  - define the message object as a receive message object
         *  - enable interrupt generation in case of CAN message transmission
         *  - define interrupt node pointer to be used (different than the one used for source MO)
         *
         *  - initialize the destination CAN message object with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canSrcNode);

        g_multican.canMsgObjConfig.msgObjId = SRC_MESSAGE_OBJECT_RX_ID;
        g_multican.canMsgObjConfig.messageId = CAN_MESSAGE_RXD_ID01;
        g_multican.canMsgObjConfig.frame = IfxMultican_Frame_receive;
        g_multican.canMsgObjConfig.rxInterrupt.enabled = TRUE;
        g_multican.canMsgObjConfig.control.extendedFrame=TRUE;
        g_multican.canMsgObjConfig.rxInterrupt.srcId = RX_INTERRUPT_SRC_ID;

        IfxMultican_Can_MsgObj_init(&g_multican.canSrcMsgObjRx, &g_multican.canMsgObjConfig);
    }
#endif

#if(CAN_PINMAP_TC275LITE_KIT_CAN==1)
    {
        /* ==========================================================================================
         * Destination CAN node configuration and initialization:
         * ==========================================================================================
         *  - load default CAN node configuration into configuration structure
         *
         *  - set destination CAN node in the "Loop-Back" mode (no external pins will be used)
         *  - assign destination CAN node to CAN node 1
         *
         *  - initialize the destination CAN node with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_Node_initConfig(&g_multican.canNodeConfig, &g_multican.can);
#if(CAN_LOOPBACK_MODE)
        g_multican.canNodeConfig.loopBackMode = TRUE;
#endif
        g_multican.canNodeConfig.nodeId = IfxMultican_NodeId_0;
        g_multican.canNodeConfig.rxPin  = &IfxMultican_RXD0B_P20_7_IN;
        g_multican.canNodeConfig.txPin  = &IfxMultican_TXD0_P20_8_OUT;

        IfxMultican_Can_Node_init(&g_multican.canDstNode, &g_multican.canNodeConfig);
        /* ==========================================================================================
         * Dst message object configuration and initialization:
         * ==========================================================================================
         *  - load default CAN message object configuration into configuration structure
         *
         *  - define the message object ID
         *  - define the CAN message ID used during arbitration phase
         *  - define the message object as a transmit message object
         *  - enable interrupt generation in case of CAN message transmission
         *  - define interrupt node pointer to be used
         *
         *  - initialize the source CAN message object with the modified configuration
         * ==========================================================================================
         */

           IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canDstNode);

           g_multican.canMsgObjConfig.msgObjId = DST_MESSAGE_OBJECT_TX_ID;
           g_multican.canMsgObjConfig.messageId = CAN_MESSAGE_TXD_ID01;
           g_multican.canMsgObjConfig.frame = IfxMultican_Frame_transmit;
           g_multican.canMsgObjConfig.txInterrupt.enabled = TRUE;
           g_multican.canMsgObjConfig.control.extendedFrame = TRUE;
           g_multican.canMsgObjConfig.txInterrupt.srcId = TX_INTERRUPT_SRC_ID;

           IfxMultican_Can_MsgObj_init(&g_multican.canDstMsgObjTx, &g_multican.canMsgObjConfig);

           IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canDstNode);

           g_multican.canMsgObjConfig.msgObjId = DST_MESSAGE_OBJECT_RX_ID;
           g_multican.canMsgObjConfig.messageId = CAN_MESSAGE_RXD_ID01;
           g_multican.canMsgObjConfig.frame = IfxMultican_Frame_receive;
           g_multican.canMsgObjConfig.rxInterrupt.enabled = TRUE;
           g_multican.canMsgObjConfig.control.extendedFrame = TRUE;
           g_multican.canMsgObjConfig.rxInterrupt.srcId = RX_INTERRUPT_SRC_ID;

          IfxMultican_Can_MsgObj_init(&g_multican.canDstMsgObjRx, &g_multican.canMsgObjConfig);


          //set EN mode and low
          IfxPort_setPinMode(&MODULE_P20, 6,  IfxPort_Mode_outputPushPullGeneral);
          IfxPort_setPinLow(&MODULE_P20, 6);

    }
#endif
}

/* Function to initialize both TX and RX messages with the default data values.
 * After initialization of the messages, the TX message will be transmitted.
 */
#define TRANSMIT_TEST     0
#define TRANSMIT_DEBUG    1
#define TRANSMIT_MODE    (TRANSMIT_DEBUG)
IFX_EXTERN sint16 g_TotalCountAcircle;

void transmitCanMessage(void)
{
    /* Define the content of the data to be transmitted */
    static IfxMultican_Status  sendStatus = IfxMultican_Status_ok;
    static uint32 dataLow,dataHigh;
    static uint32 can_tx_id;
    static uint32 tx_seq =0;
#if(TRANSMIT_MODE==TRANSMIT_TEST)
    dataLow  = 0xD0C01000;
    dataHigh = 0xBA876543;

    dataLow = dataLow +1;
    if(dataLow >= 0xFFFFFFFF)
    {
        dataHigh=dataHigh+1;
    }
#elif(TRANSMIT_MODE==TRANSMIT_DEBUG)
    IFX_EXTERN uint32 count_A,count_Z;
    IFX_EXTERN sint16 cycleTotalCount;
    IFX_EXTERN sint16 Encoder_RawPosition;
//    IFX_EXTERN sint16 spiEndcoderPos;
    IFX_EXTERN uint32 g_TimerCtrlStep;

    IFX_EXTERN uint16 g_Duty_ADC;
    IFX_EXTERN uint16 u8DrvDuty;

    IFX_EXTERN uint8 g_PosCtrlStep;
    IFX_EXTERN sint16 show_commuPoint;
    IFX_EXTERN sint16 Encoder_StartPosition;
    IFX_EXTERN uint16 g_absMotSpeed;
    IFX_EXTERN uint16 u8DrvDuty_ref;
    IFX_EXTERN uint16 REF_Speed;
    IFX_EXTERN uint16 REF_Current;

    IFX_EXTERN uint16 g_DutyLimitMax;
    IFX_EXTERN uint32 g_DutyStarup;
    IFX_EXTERN uint16 u16StartUpCount;

#define CANFrame_2ByteVariable_In4Bytes(A,B)  (((uint32)A&0x0000FFFF)+(((uint32)(B)<<16)&0xFFFF0000))
#define CANFrame0_3Bytes(B0,B1,B2,B3) (((uint32)B0&0x000000FF)+(((uint32)(B1)<<8)&0x0000FF00)+(((uint32)(B2)<<16)&0x00FF0000)+(((uint32)(B3)<<24)&0xFF000000))
#define CANFrame4_7Bytes(B4,B5,B6,B7) (((uint32)B4&0x000000FF)+(((uint32)(B5)<<8)&0x0000FF00)+(((uint32)(B6)<<16)&0x00FF0000)+(((uint32)(B7)<<24)&0xFF000000))

   switch(tx_seq)
   {
       case 0x00:
       {
          dataLow  = CANFrame_2ByteVariable_In4Bytes(g_absMotSpeed,Encoder_StartPosition);
          dataHigh = CANFrame4_7Bytes(((uint8)(g_bldc.state)|((uint8)(g_bldc.rot_dir)<<4)),
                                      0,
                                      (uint8)((uint32)(g_bldc.u32DiagCode)>>8),
                                      (uint8)(g_bldc.u32DiagCode));
          can_tx_id = CAN_MESSAGE_TXD_ID00;

          tx_seq++;
       }
       break;
       case 0x01:
       {
          dataLow  = CANFrame_2ByteVariable_In4Bytes(g_TotalCountAcircle,
                                           Encoder_RawPosition);
          dataHigh = CANFrame4_7Bytes(0,
                                      u8DrvDuty/10,
                                      g_PosCtrlStep,
                                      0);
          can_tx_id = CAN_MESSAGE_TXD_ID01;

          tx_seq++;
       }
       break;
       case 0x02:
       {
                dataLow  = CANFrame_2ByteVariable_In4Bytes(g_bldc.CurrentU_BUS,
                        g_bldc.CurrentV_BUS);
                dataHigh = CANFrame_2ByteVariable_In4Bytes(g_bldc.CurrentW_BUS,
                        u8DrvDuty_ref );
                can_tx_id = CAN_MESSAGE_TXD_ID02;

                tx_seq++;
       }
       break;
       case 0x03:
          {
                   dataLow  = CANFrame_2ByteVariable_In4Bytes(REF_Current,
                           REF_Speed);
                   dataHigh = CANFrame_2ByteVariable_In4Bytes(0,
                          0);
                   can_tx_id = CAN_MESSAGE_TXD_ID03;

                   tx_seq = 0x00;
          }
          break;
       default:
       {
          tx_seq = 0x00;
       }
       break;
   }

#else
#endif

   // if( IfxMultican_Status_notSentBusy != sendStatus)
    {
#if(CAN_PINMAP_MDA48VBLDC_CAN0)
    /* Invalidation of the RX message */
   IfxMultican_Message_init(&g_multican.rxSrcMsg,
                             CAN_MESSAGE_RXD_ID01,
                             INVALID_DATA_VALUE,
                             INVALID_DATA_VALUE,
                             IfxMultican_DataLengthCode_8);

    /* Initialization of the TX message */
    IfxMultican_Message_init(&g_multican.txSrcMsg,
                             can_tx_id,
                             dataLow,
                             dataHigh,
                             IfxMultican_DataLengthCode_8);

    sendStatus=IfxMultican_Can_MsgObj_sendMessage(&g_multican.canSrcMsgObjTx, &g_multican.txSrcMsg);
#endif

#if(CAN_PINMAP_TC275LITE_KIT_CAN)
    IfxMultican_Message_init(&g_multican.rxDstMsg,
                              CAN_MESSAGE_RXD_ID01 ,
                                 INVALID_DATA_VALUE,
                                 INVALID_DATA_VALUE,
                                 IfxMultican_DataLengthCode_8);

        /* Initialization of the TX message */
        IfxMultican_Message_init(&g_multican.txDstMsg,
                                 can_tx_id,
                                 dataLow,
                                 dataHigh,
                                 IfxMultican_DataLengthCode_8);

        sendStatus=IfxMultican_Can_MsgObj_sendMessage(&g_multican.canDstMsgObjTx, &g_multican.txDstMsg);

#endif
    }

}

