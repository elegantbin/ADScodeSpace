/**********************************************************************************************************************
 * \file ADC_Queued_Scan.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
*/


#include "ADC.h"
#include "CommutationControl.h"
#include "Duty_control_ADC.h"
#include "dutylimit.h"
uint16 g_Duty_ADC;
float V_Duty;
uint16 g_Speed_ADC;
float V_Speed;

void DutyInput_ADC(void)
{

   float Factor_DAC = 5.0/4096.0;
   float V_tracker1 = 5.0;
   float V_Duty_MAX = V_tracker1*0.9;

   V_Duty = ADC_result[2][1]*Factor_DAC;
   if (K_VOL_DUTY_ADC_MIN<=V_Duty&&V_Duty<=K_VOL_DUTY_ADC_MAX)
   {
       g_Duty_ADC = (uint8)(85*V_Duty/V_Duty_MAX);
   }
   else if(V_Duty<K_VOL_DUTY_ADC_MIN)
   {
       g_Duty_ADC = K_MOTOR_DRVPWM_DUTY_MIN;
   }
   else
   {
       g_Duty_ADC = g_DutyLimitMax;
   }
   //g_Duty_ADC=V_Speed*10;

}

void SpeedInput_ADC(void)
{
    float Factor_DAC = 5.0/4096.0;
//    float V_Speed_MAX = 4.5;  //unit:V
    uint16 Speed_ADC;
    V_Speed = ADC_result[2][1]*Factor_DAC;
    if (K_VOL_Speed_ADC_MIN<=V_Speed&&V_Speed<=K_VOL_Speed_ADC_MAX)
    {
        Speed_ADC = (uint16)(1030*V_Speed-1135);
        g_Speed_ADC = ((int)(Speed_ADC/100))*100;
    }
    else if(V_Speed<K_VOL_Speed_ADC_MIN)
    {
        g_Speed_ADC = 100;
    }
    else
    {
        g_Speed_ADC = 3500;
    }
}



