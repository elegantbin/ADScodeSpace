/********************************************************************************************************************
 * \file MULTICAN_FD.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "MULTICAN_FD.h"
#include <EncoderGpt12.h>
#include <TempDetect.h>
#include "IfxCpu_Intrinsics.h"
#include "IfxGpt12_reg.h"
#include "AppTorqueControl.h"
#include "Configuration.h"
#include "ConfigurationISR.h"
#include "MotorMgtSwc.h"
#include "ADC.h"
#include "spi_encoder.h"
#include "velocityPI.h"
#include "TorqueControl.h"
#include "stdlib.h"
#include <DataFlash_ZeroOffest.h>
#include "CommutationControl.h"
#include "CurrentADC.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

#if(1)

FloatBytes                          Current_Uphase;
FloatBytes                          Current_Vphase;
FloatBytes                          Current_Wphase;
Bldc_Calibration                    g_calibration;

multicanType                        g_multican;
canCommunicationStatusType          g_status = CanCommunicationStatus_Success;
volatile uint8                      g_isrRxCount = 0; /* Declared as volatile in order not to be removed by compiler */
const uint8                         g_dlcLookUpTable[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64 };
const canMessageObjectConfigType    g_messageObjectConf[NUMBER_OF_CAN_FD_CASES] =
                                    {
                                        { MOTOR_COMMAND_FL_ID , TRUE,  IfxMultican_DataLengthCode_64,  FALSE  },
                                        { MOTOR_COMMAND_FR_ID , TRUE,  IfxMultican_DataLengthCode_64,  FALSE  },
                                        { MOTOR_COMMAND_RL_ID , TRUE,  IfxMultican_DataLengthCode_64,  FALSE  },
                                        { MOTOR_COMMAND_RR_ID , TRUE,  IfxMultican_DataLengthCode_64,  FALSE  }

                                    };//transmit
const canMessageObjectConfigType canDstMsgObj[NUMBER_OF_CAN_FD_CASES]=
                                    {
                                        { MOTOR_FEEDBACK_FL_ID, TRUE,  IfxMultican_DataLengthCode_64,  FALSE },
                                        { MOTOR_FEEDBACK_FR_ID, TRUE,  IfxMultican_DataLengthCode_64,  FALSE },
                                        { MOTOR_FEEDBACK_RL_ID, TRUE,  IfxMultican_DataLengthCode_64,  FALSE },
                                        { MOTOR_FEEDBACK_RR_ID, TRUE,  IfxMultican_DataLengthCode_64,  FALSE }
                                    };//receive

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Macro to define Interrupt Service Routine.
 * This macro:
 * - defines linker section as .intvec_tc<vector number>_<interrupt priority>.
 * - defines compiler specific attribute for the interrupt functions.
 * - defines the Interrupt Service Routine as ISR function.
 *
 * IFX_INTERRUPT(isr, vectabNum, priority)
 *  - isr: Name of the ISR function.
 *  - vectabNum: Vector table number.
 *  - priority: Interrupt priority. Refer Usage of Interrupt Macro for more details.
 */
/* Interrupt Service Routine (ISR) called once the RX interrupt is generated.
 * Reads the received CAN message and in case of no errors, increments the counter to
 * indicate the number of successfully received CAN messages.
 */
IFX_INTERRUPT(canIsrRxHandler, 0, ISR_PRIORITY_CAN_RX);
IFX_INTERRUPT(DebugcanIsrRxHandler, 0, ISR_PRIORITY_CAN_debug_RX);

void DebugcanIsrRxHandler(void)
{
    IfxMultican_Status readStatus;

    /* Read the received CAN message and store the status of the operation */

#if(CAN_PINMAP_MDA48VBLDC_CAN0==1)

    readStatus = IfxMultican_Can_MsgObj_readMessage(&g_multican.canSrcMsgObjRx, &g_multican.rxSrcMsg);

    if( g_multican.rxSrcMsg.id  == CAN_MESSAGE_RXD_ID01)
    {
        g_bldc.cmd         = (enMotorCmd)(g_multican.rxSrcMsg.data[0]);
        g_bldc.RefTorque = (uint8)(g_multican.rxSrcMsg.data[0]>>8);
        g_bldc.Refspeed    = (uint16)(g_multican.rxSrcMsg.data[0]>>16);
        g_bldc.loop_cmd = (MotorLoopCmd)(g_multican.rxSrcMsg.data[1]);
        g_bldc.RefPosition = (uint16)(g_multican.rxSrcMsg.data[1]>>8);
        g_calibration.Type_Write_Enable = (uint8)(g_multican.rxSrcMsg.data[1]>>24);
     }

    if( g_multican.rxSrcMsg.id  == CAN_MESSAGE_RXD_ID02)
    {
        g_calibration.Step_offset_CW  = (uint8)(g_multican.rxSrcMsg.data[0]);
        g_calibration.Step_offset_CCW = (uint8)(g_multican.rxSrcMsg.data[0]>>8);
        g_calibration.Zero_offset_CW  = (uint8)(g_multican.rxSrcMsg.data[0]>>16);
        g_calibration.Zero_offset_CCW = (uint8)(g_multican.rxSrcMsg.data[0]>>24);
        g_calibration.Offset_Write_Enable = (uint8)(g_multican.rxSrcMsg.data[1]);
        g_bldc.RefCurrent                 =(uint16)(g_multican.rxSrcMsg.data[1]>>8);
        g_calibration.MotorType  = (uint8)(g_multican.rxSrcMsg.data[1]>>24);
    }

    if( g_multican.rxSrcMsg.id  == CAN_MESSAGE_RXD_ID03)
    {
        g_calibration.Speed_KI   = (uint16)(g_multican.rxSrcMsg.data[0]);
        g_calibration.Speed_KP   = (uint16)(g_multican.rxSrcMsg.data[0]>>16);
        g_calibration.Current_KI = (uint16)(g_multican.rxSrcMsg.data[1]);
        g_calibration.Current_KP = (uint16)(g_multican.rxSrcMsg.data[1]>>16);

    }
    if( g_multican.rxSrcMsg.id  == CAN_MESSAGE_RXD_ID04)
    {
        g_calibration.Speed_KPI_Write_Enabel  = (uint8)(g_multican.rxSrcMsg.data[0]);
        g_calibration.Current_KPI_Write_Enabel = (uint8)(g_multican.rxSrcMsg.data[0]>>8);
        g_calibration.Speed_KD = (uint16)(g_multican.rxSrcMsg.data[0]>>16);
        g_bldc.RefTorque = (uint8)(g_multican.rxSrcMsg.data[1]);
    }



#endif

#if(CAN_PINMAP_TC275LITE_KIT_CAN==1)
    readStatus = IfxMultican_Can_MsgObj_readMessage(&g_candebug.canDstMsgObjRx, &g_candebug.rxDstMsg);

    if(g_candebug.rxDstMsg.id==CAN_MESSAGE_RXD_ID01)
    {
          g_bldc.cmd=(uint8)(g_candebug.rxDstMsg.data[0]);
          g_bldc.duty=(uint8)(g_candebug.rxDstMsg.data[0]>>8);
    }
#endif

}

/* Interrupt Service Routine (ISR) called once the RX interrupt has been generated.
 * Compares the content of the received CAN message with the content of the transmitted CAN message
 * and in case of success, turns on the LED2 to indicate successful CAN message reception.
 */

void canIsrRxHandler(void)
{
    g_isrRxCount = MotorTybe_Read ;
//    g_currentCanFdUseCase = MotorTybe_Read;
    IfxMultican_Status readStatus_canfd;
    readStatus_canfd = IfxMultican_MsgObj_readLongFrame(g_multican.canDstMsgObj[g_isrRxCount].node->mcan,
                                                             g_multican.canDstMsgObj[g_isrRxCount].msgObjId,
                                                             &g_multican.rxMsg,
                                                             (uint32*)&g_multican.rxData);

          g_bldc.RefPosition = (g_multican.rxData[21]<<8)|g_multican.rxData[20];
          g_bldc.Refspeed    = (g_multican.rxData[25]<<8)|g_multican.rxData[24];
          g_bldc.RefTorque   = g_multican.rxData[26];
          g_bldc.cmd=(enMotorCmd)((g_multican.rxData[30])&0x0F);
          g_bldc.loop_cmd    = ((g_multican.rxData[31])&0x0F);


    /* If no new data has been received, report an error */
    if(!( readStatus_canfd & IfxMultican_Status_newData ))
    {
//        while(1)
                {
                }
    }

    /* If new data has been received but with one message lost, report an error */
    if(readStatus_canfd == IfxMultican_Status_newDataButOneLost)
    {
//        while(1)
                {
                }
    }

    /* If there was no error, increment the counter to indicate the number of successfully received CAN messages */
    if (g_status == CanCommunicationStatus_Success)
    {
//        while(1)
                {
                }
    }


}

/* Function to initialize MULTICAN module, nodes and message objects related to this application use case */
void initMultican(void)
{
    uint8 currentCanMessageObject;
    /* ==========================================================================================
     * CAN module configuration and initialization:
     * ==========================================================================================
     *  - load the default CAN module configuration into the configuration structure
     *  - define the interrupt priority for both interrupt node pointers used in the example
     *  - initialize the CAN module with the modified configuration
     * ==========================================================================================
     */
    IfxMultican_Can_initModuleConfig(&g_multican.canConfig, &MODULE_CAN);

    g_multican.canConfig.nodePointer[RX_INTERRUPT_SRC_ID].priority = ISR_PRIORITY_CAN_RX;
    g_multican.canConfig.nodePointer[RX_debug_INTERRUPT_SRC_ID].priority = ISR_PRIORITY_CAN_debug_RX;

    IfxMultican_Can_initModule(&g_multican.can, &g_multican.canConfig);

    /* ==========================================================================================
     * Common CAN node configuration and initialization:
     * ==========================================================================================
     *  - load the default CAN node configuration into the configuration structure
     *
     *  - set CAN node in the "Loop back" mode (no external pins will be used)
     *  - enable usage of CAN Flexible Data rate (CAN FD) (NCRx.FDEN  = 1)
     *
     *  - set the nominal baud rate (used during arbitration phase) to 500kbits
     *  - set the nominal sample point to 80% of the total nominal bit time
     *  - set the nominal resynchronisation jump width to 20% of the total nominal bit time
     *  - set the fast baud rate (used during data phase) to 2Mbits
     *  - set the fast sample point to 70% of the total nominal bit time
     *  - set the fast resynchronisation jump width to 20% of the total nominal bit time
     *  - set the transceiver delay compensation offset to 0
     * ==========================================================================================
     */
    IfxMultican_Can_Node_initConfig(&g_multican.canNodeConfig, &g_multican.can);

    /* ==========================================================================================
     * CAN node 1 configuration and initialization:
     * ==========================================================================================
     *  - assign the node to CAN node 1
     *  - initialize the CAN node 1 with the modified configuration
     * ==========================================================================================
     */

    g_multican.canNodeConfig.nodeId = IfxMultican_NodeId_0;
    g_multican.canNodeConfig.rxPin  = &IfxMultican_RXD0A_P02_1_IN;
    g_multican.canNodeConfig.txPin  = &IfxMultican_TXD0_P02_0_OUT;
    g_multican.canNodeConfig.baudrate = 500000;
//    g_multican.canNodeConfig.lastErrorCodeInterrupt.enabled = FALSE ;
//    g_multican.canNodeConfig.alertInterrupt.enabled = FALSE ;

    IfxMultican_Can_Node_init(&g_multican.canNode1, &g_multican.canNodeConfig);

    /* ==========================================================================================
     * CAN node 0 configuration and initialization:
     * ==========================================================================================
     *  - assign the node to CAN node 0
     *  - initialize the CAN node 0 with the modified configuration
     * ==========================================================================================
     */
    g_multican.canNodeConfig.flexibleDataRate = TRUE;
    g_multican.canNodeConfig.fdConfig.nominalBaudrate = 1000000;//500000
    g_multican.canNodeConfig.fdConfig.nominalSamplePoint = 8000;
    g_multican.canNodeConfig.fdConfig.nominalSynchJumpWidth = 2000;
    g_multican.canNodeConfig.fdConfig.fastBaudrate = 2000000;//2000000
    g_multican.canNodeConfig.fdConfig.fastSamplePoint = 7000;
    g_multican.canNodeConfig.fdConfig.fastSynchJumpWidth = 2000;
    g_multican.canNodeConfig.fdConfig.loopDelayOffset = 0;
//    g_multican.canNodeConfig.lastErrorCodeInterrupt.enabled = FALSE ;
//    g_multican.canNodeConfig.errorWarningLevel = 0;

    g_multican.canNodeConfig.nodeId = IfxMultican_NodeId_2;
    g_multican.canNodeConfig.rxPin  = &IfxMultican_RXD2B_P02_3_IN;
    g_multican.canNodeConfig.txPin  = &IfxMultican_TXD2_P02_2_OUT;

    IfxMultican_Can_Node_init(&g_multican.canNode0, &g_multican.canNodeConfig);

    /* ================================================================================================================
     * Source standard message objects configuration and initialization:
     * ================================================================================================================
     *  - load the default CAN message object configuration into the configuration structure
     *
     *  - define the message object as a transmit message object (common setting for all source message objects)
     *  - define acceptance of the frame with only matching IDE (common setting for all source message objects)
     *
     *  - define the message object ID (each message object ID value should be unique)
     *  - define the CAN message ID used during arbitration phase
     *  - define the standard or extended frame to be used
     *  - define the message object that holds data bytes 8 to 35 (top message)
     *  - define the message object that holds data bytes 36 to 63 (bottom message)
     *
     *  - define the length of the transmitted data (related to MOFCRn.DLC, MOFCRn.FDF, MOFGPR.BOT, and MOFGPR.TOP bitfields)
     *  - define the usage of bit rate switching (related to MOFCRn.BRS bitfield)
     *
     *  - initialize the source standard CAN message object with the modified configuration
     * ----------------------------------------------------------------------------------------------------------------
     * These CAN message objects are assigned to CAN Node 0
     * ================================================================================================================
     */
    IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canNode0);

    g_multican.canMsgObjConfig.frame = IfxMultican_Frame_transmit;
    g_multican.canMsgObjConfig.control.matchingId = TRUE;

    for(currentCanMessageObject = 0; currentCanMessageObject < NUMBER_OF_CAN_FD_CASES; currentCanMessageObject++)
    {
        g_multican.canMsgObjConfig.msgObjId = (IfxMultican_MsgObjId)currentCanMessageObject;
        g_multican.canMsgObjConfig.messageId = g_messageObjectConf[currentCanMessageObject].messageId;
        g_multican.canMsgObjConfig.control.extendedFrame = g_messageObjectConf[currentCanMessageObject].extendedFrame;
        g_multican.canMsgObjConfig.control.topMsgObjId = (2 * currentCanMessageObject) + SRC_EXTENDED_MO_OFFSET;
        g_multican.canMsgObjConfig.control.bottomMsgObjId = g_multican.canMsgObjConfig.control.topMsgObjId + 1;

        g_multican.canMsgObjConfig.control.messageLen = g_messageObjectConf[currentCanMessageObject].messageLen;
        g_multican.canMsgObjConfig.control.fastBitRate = g_messageObjectConf[currentCanMessageObject].fastBitRate;

        IfxMultican_Can_MsgObj_init(&g_multican.canSrcMsgObj[currentCanMessageObject], &g_multican.canMsgObjConfig);
    }


    /* ================================================================================================================
     * Destination standard message objects configuration and initialization:
     * ================================================================================================================
     *  - load the default CAN message object configuration into the configuration structure
     *
     *  - define the message object as a receive message object (common setting for all destination message objects)
     *  - define acceptance of the frame with only matching IDE (common setting for all destination message objects)
     *  - enable interrupt generation in case of CAN message reception (common setting for all destination message objects)
     *  - define interrupt node pointer to be used (all destination message objects share the SAME node)
     *
     *  - define the message object ID (each message object ID value should be unique)
     *  - define the CAN message ID used during arbitration phase (should match the source message objects ID)
     *  - define the standard or extended frame to be used
     *  - define the message object that holds data bytes 8 to 35 (top message)
     *  - define the message object that holds data bytes 36 to 63 (bottom message)
     *
     *  - define the length of the received data (related to MOFGPR.BOT and MOFGPR.TOP bitfields)
     *
     *  - initialize the source standard CAN message object with the modified configuration
     * ----------------------------------------------------------------------------------------------------------------
     * These CAN message objects are assigned to CAN Node 1
     * ================================================================================================================
     */
    IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canNode0);

    g_multican.canMsgObjConfig.frame = IfxMultican_Frame_receive;
    g_multican.canMsgObjConfig.control.matchingId = TRUE;
    g_multican.canMsgObjConfig.rxInterrupt.enabled = TRUE;
    g_multican.canMsgObjConfig.rxInterrupt.srcId = RX_INTERRUPT_SRC_ID;
//    g_multican.canMsgObjConfig.acceptanceMask = 0x0UL;

    for(currentCanMessageObject = 0; currentCanMessageObject < NUMBER_OF_CAN_FD_CASES; currentCanMessageObject++)
    {
//        g_multican.canMsgObjConfig.msgObjId = (IfxMultican_MsgObjId)(currentCanMessageObject + DST_MO_OFFSET);
//        g_multican.canMsgObjConfig.messageId = g_messageObjectConf[currentCanMessageObject].messageId;
//        g_multican.canMsgObjConfig.control.extendedFrame = g_messageObjectConf[currentCanMessageObject].extendedFrame;
//        g_multican.canMsgObjConfig.control.topMsgObjId = (2 * currentCanMessageObject) + DST_EXTENDED_MO_OFFSET;
//        g_multican.canMsgObjConfig.control.bottomMsgObjId = g_multican.canMsgObjConfig.control.topMsgObjId + 1;
////        g_multican.canMsgObjConfig.acceptanceMask = 0x0UL;
//
//        g_multican.canMsgObjConfig.control.messageLen = g_messageObjectConf[currentCanMessageObject].messageLen;

        g_multican.canMsgObjConfig.msgObjId = (IfxMultican_MsgObjId)(currentCanMessageObject + DST_MO_OFFSET);
        g_multican.canMsgObjConfig.messageId =canDstMsgObj[currentCanMessageObject].messageId;
        g_multican.canMsgObjConfig.control.extendedFrame = canDstMsgObj[currentCanMessageObject].extendedFrame;
        g_multican.canMsgObjConfig.control.topMsgObjId = (2 * currentCanMessageObject) + DST_EXTENDED_MO_OFFSET;
        g_multican.canMsgObjConfig.control.bottomMsgObjId = g_multican.canMsgObjConfig.control.topMsgObjId + 1;

        g_multican.canMsgObjConfig.control.messageLen = canDstMsgObj[currentCanMessageObject].messageLen;
        g_multican.canMsgObjConfig.control.fastBitRate = canDstMsgObj[currentCanMessageObject].fastBitRate;

        IfxMultican_Can_MsgObj_init(&g_multican.canDstMsgObj[currentCanMessageObject], &g_multican.canMsgObjConfig);
    }



        /* ==========================================================================================
         * Source message object configuration and initialization:
         * ==========================================================================================
         *  - load default CAN message object configuration into configuration structure
         *
         *  - define the message object ID
         *  - define the CAN message ID used during arbitration phase
         *  - define the message object as a transmit message object
         *  - enable interrupt generation in case of CAN message transmission
         *  - define interrupt node pointer to be used
         *
         *  - initialize the source CAN message object with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canNode1);

        g_multican.canMsgObjConfig.msgObjId = 4;
        g_multican.canMsgObjConfig.messageId = 0x777;
        g_multican.canMsgObjConfig.control.matchingId               = FALSE;
        g_multican.canMsgObjConfig.frame = IfxMultican_Frame_transmit;
        g_multican.canMsgObjConfig.txInterrupt.enabled = FALSE;
        g_multican.canMsgObjConfig.control.extendedFrame = TRUE;

        g_multican.canMsgObjConfig.control.topMsgObjId              = 252;
        g_multican.canMsgObjConfig.control.bottomMsgObjId           = 253;
        g_multican.canMsgObjConfig.control.fastBitRate              = FALSE; /* fast bit rate enable/disable */
        g_multican.canMsgObjConfig.control.messageLen               = IfxMultican_DataLengthCode_8;
        IfxMultican_Can_MsgObj_init(&g_multican.canSrcMsgObjTx, &g_multican.canMsgObjConfig);

        /* ==========================================================================================
         * Rx message object configuration and initialization:
         * ==========================================================================================
         *  - load default CAN message object configuration into configuration structure
         *
         *  - define the message object ID (different than the ID used for source MO)
         *  - define the CAN message ID used during arbitration phase (same as ID used for source MO)
         *  - define the message object as a receive message object
         *  - enable interrupt generation in case of CAN message transmission
         *  - define interrupt node pointer to be used (different than the one used for source MO)
         *
         *  - initialize the destination CAN message object with the modified configuration
         * ==========================================================================================
         */
        IfxMultican_Can_MsgObj_initConfig(&g_multican.canMsgObjConfig, &g_multican.canNode1);

        g_multican.canMsgObjConfig.msgObjId = 5;
        g_multican.canMsgObjConfig.messageId = 0x888;
        g_multican.canMsgObjConfig.frame = IfxMultican_Frame_receive;
        g_multican.canMsgObjConfig.rxInterrupt.enabled = TRUE;
        g_multican.canMsgObjConfig.control.extendedFrame=TRUE;
        g_multican.canMsgObjConfig.rxInterrupt.srcId = IfxMultican_SrcId_2;

        g_multican.canMsgObjConfig.acceptanceMask = 0x0UL;

        IfxMultican_Can_MsgObj_init(&g_multican.canSrcMsgObjRx, &g_multican.canMsgObjConfig);

}
/* Function to initialize and transmit CAN message.
 * Before a CAN message is transmitted, two CAN messages (TX and RX) need to be initialized.
 * The TX message (message that is transmitted) is initialized with the combination of current data payload byte and
 * current CAN message value. The RX message (message where the received CAN message is stored) is initialized with
 * invalid ID, data, length, and fast bit rate value (after successful CAN transmission the values are replaced with
 * the valid content). No additional CAN message is transmitted until the received data has been read by the interrupt
 * service routine.
 */
//IFX_EXTERN sint16 g_TotalCountAcircle;
static IfxMultican_Status  canfd_sendStatus = IfxMultican_Status_ok;
void transmitCanMessage(void)
{
    g_currentCanFdUseCase = MotorTybe_Read;
    Current_Vphase.actual =  g_bldc.CurrentV_BUS;

    IFX_EXTERN uint32 count_A,count_Z;
    IFX_EXTERN sint16 cycleTotalCount;
    IFX_EXTERN sint16 Encoder_RawPosition;
//    IFX_EXTERN sint16 spiEndcoderPos;
    IFX_EXTERN uint32 g_TimerCtrlStep;

    IFX_EXTERN uint16 g_Duty_ADC;
    IFX_EXTERN uint16 u8DrvDuty;

    IFX_EXTERN uint8 g_PosCtrlStep;
    IFX_EXTERN sint16 show_commuPoint;
    IFX_EXTERN sint16 Encoder_StartPosition;
    IFX_EXTERN uint16 g_absMotSpeed;
    IFX_EXTERN uint16 u8DrvDuty_Speed;
    IFX_EXTERN uint16 REF_Speed;
    IFX_EXTERN uint16 REF_Current;

    IFX_EXTERN uint16 g_DutyLimitMax;
    IFX_EXTERN uint32 g_DutyStarup;
    IFX_EXTERN uint16 u16StartUpCount;
    IFX_EXTERN uint8 g_DriverBoardTemp;
    IFX_EXTERN uint16 BC_current_AD;
    IFX_EXTERN uint8 MotorTorque;
    IFX_EXTERN uint16 Actual_Angle_Position;
    IFX_EXTERN uint8 MotorTorque;
    IFX_EXTERN uint8  REF_Current_By_Torque;


    if(g_messageObjectConf[g_currentCanFdUseCase].messageLen > IfxMultican_DataLengthCode_8)
    {

        IfxMultican_Message_longFrameInit(&g_multican.txMsg,
                                          g_messageObjectConf[g_currentCanFdUseCase].messageId,
                                          g_messageObjectConf[g_currentCanFdUseCase].messageLen,
                                          g_messageObjectConf[g_currentCanFdUseCase].fastBitRate);


        if(Encoder_RawPosition > 0)
         {
            g_multican.txData[0] = 1;
         }
         else if(Encoder_RawPosition < 0)
         {
             g_multican.txData[0] = 2;
         }
         if(g_absMotSpeed == 0)
         {
             g_multican.txData[0] = 0;
         }

        g_multican.txData[1] = Current_Vphase.bytes_f[0];
        g_multican.txData[2] = Current_Vphase.bytes_f[1];
        g_multican.txData[3] = Current_Vphase.bytes_f[2];
        g_multican.txData[4] = Current_Vphase.bytes_f[3];

        g_multican.txData[5]= g_bldc.Voltage_BUS;
        g_multican.txData[6]= 0;
        g_multican.txData[7]= 0;
        g_multican.txData[8]= 0;

        g_multican.txData[9]= ((Actual_Angle_Position)>>0)&0XFF;
        g_multican.txData[10]=((Actual_Angle_Position)>>8)&0XFF;

        g_multican.txData[11]= g_DriverBoardTemp;

        g_multican.txData[12]= (g_absMotSpeed)&0XFF;
        g_multican.txData[13]= (g_absMotSpeed>>8)&0XFF;

        g_multican.txData[14]= MotorTorque;

        g_multican.txData[18]= (uint16)g_bldc.u32DiagCode;

        if(g_bldc.state == MOTOR_STATE_STOP)
        {
            if(g_bldc.loop_cmd == 0||g_bldc.loop_cmd == 1||g_bldc.loop_cmd == 2)
            {
                g_multican.txData[19] = 0;
            }
        }
        else
        {
            g_multican.txData[19] = 1;
        }
//        g_multican.txData[20]= Step_Offset_CW_Read;
//        g_multican.txData[21]= Step_Offset_CCW_Read;
//        g_multican.txData[22]= Zero_Offset_CW_Read;
//        g_multican.txData[23]= Zero_Offset_CCW_Read;

//        while(IfxMultican_Status_notSentBusy ==
//                IfxMultican_Can_MsgObj_sendLongFrame(&g_multican.canSrcMsgObj[g_currentCanFdUseCase],
//                                                     &g_multican.txMsg,
//                                                     (uint32*)&g_multican.txData));
        IfxMultican_Can_MsgObj_sendLongFrame(&g_multican.canSrcMsgObj[g_currentCanFdUseCase],
                                                            &g_multican.txMsg,
                                                            (uint32*)&g_multican.txData);
    }
    else
    {
        /* Initialization of the TX message (standard frame) */

        IfxMultican_Message_init(&g_multican.txMsg,
                                 g_messageObjectConf[g_currentCanFdUseCase].messageId,
//                                 *(uint32*)&g_multican.txData[0],
//                                 *(uint32*)&g_multican.txData[4],
                                 INVALID_DATA_VALUE,
                                 INVALID_DATA_VALUE,
                                 g_messageObjectConf[g_currentCanFdUseCase].messageLen);
        /* Send the CAN message with the previously defined TX message content */
//        while(IfxMultican_Status_notSentBusy ==
//                IfxMultican_Can_MsgObj_sendMessage(&g_multican.canSrcMsgObj[g_currentCanFdUseCase],
//                                                   &g_multican.txMsg));

    }

    /* Wait until previously transmitted data has been received in the destination message object */
//    while(g_isrRxCount == g_currentCanFdUseCase)
//    {
//    }
}
/* Function to initialize both TX and RX messages with the default data values.
 * After initialization of the messages, the TX message will be transmitted.
 */
#define TRANSMIT_TEST     0
#define TRANSMIT_DEBUG    1
#define TRANSMIT_MODE    (TRANSMIT_DEBUG)
IFX_EXTERN sint16 g_TotalCountAcircle;
FloatBytes g_floatbytes;
static IfxMultican_Status  debug_sendStatus = IfxMultican_Status_ok;
void transmitCanDebugMessage(void)
{
    /* Define the content of the data to be transmitted */
    static uint32 dataLow,dataHigh;
    static uint32 can_tx_id;
    static uint32 tx_seq =0;

    Current_Uphase.actual =  g_bldc.CurrentU_BUS;
    Current_Vphase.actual =  g_bldc.CurrentV_BUS;
    Current_Wphase.actual =  g_bldc.CurrentW_BUS;

#if(TRANSMIT_MODE==TRANSMIT_TEST)
    dataLow  = 0xD0C01000;
    dataHigh = 0xBA876543;

    dataLow = dataLow +1;
    if(dataLow >= 0xFFFFFFFF)
    {
        dataHigh=dataHigh+1;
    }
#elif(TRANSMIT_MODE==TRANSMIT_DEBUG)
    IFX_EXTERN uint32 count_A,count_Z;
    IFX_EXTERN sint16 cycleTotalCount;
    IFX_EXTERN sint16 Encoder_RawPosition;
//    IFX_EXTERN sint16 spiEndcoderPos;
    IFX_EXTERN uint32 g_TimerCtrlStep;

    IFX_EXTERN uint16 g_Duty_ADC;

    IFX_EXTERN uint8 g_PosCtrlStep;
    IFX_EXTERN sint16 show_commuPoint;
    IFX_EXTERN sint16 Encoder_StartPosition;
    IFX_EXTERN uint16 g_absMotSpeed;
    IFX_EXTERN uint16 u8DrvDuty_Speed;
    IFX_EXTERN uint16 REF_Speed;
    IFX_EXTERN float32 REF_Current;
    IFX_EXTERN uint16  ref_current;

    IFX_EXTERN uint16 g_DutyLimitMax;
    IFX_EXTERN uint32 g_DutyStarup;
    IFX_EXTERN uint16 u16StartUpCount;
    IFX_EXTERN uint8 g_DriverBoardTemp;
    IFX_EXTERN uint16 BC_current_AD;
    IFX_EXTERN uint8 REF_Torque;
    IFX_EXTERN sint32 error_position;
    IFX_EXTERN uint16 REF_Angle_Position;
    IFX_EXTERN uint16 Actual_Angle_Position;
    IFX_EXTERN uint8 MotorTorque;
    IFX_EXTERN uint8  REF_Current_By_Torque;
    IFX_EXTERN uint32 Zero_Offset_CCW_Read;



#define CANFrame_2ByteVariable_In4Bytes(A,B)  (((uint32)A&0x0000FFFF)+(((uint32)(B)<<16)&0xFFFF0000))
#define CANFrame0_3Bytes(B0,B1,B2,B3) (((uint32)B0&0x000000FF)+(((uint32)(B1)<<8)&0x0000FF00)+(((uint32)(B2)<<16)&0x00FF0000)+(((uint32)(B3)<<24)&0xFF000000))
#define CANFrame4_7Bytes(B4,B5,B6,B7) (((uint32)B4&0x000000FF)+(((uint32)(B5)<<8)&0x0000FF00)+(((uint32)(B6)<<16)&0x00FF0000)+(((uint32)(B7)<<24)&0xFF000000))

   switch(tx_seq)
   {
       case 0x00:
       {
          dataLow  = CANFrame_2ByteVariable_In4Bytes(g_absMotSpeed,Encoder_StartPosition);
          dataHigh = CANFrame4_7Bytes(((uint8)(g_bldc.state)|((uint8)(g_bldc.rot_dir)<<4)),
                                        REF_Torque,
                                        MotorTorque,
                                      (uint8)(g_bldc.u32DiagCode));//MotorTorque
          can_tx_id = CAN_MESSAGE_TXD_ID00;

          tx_seq++;
       }
       break;
       case 0x01:
       {
          dataLow  = CANFrame_2ByteVariable_In4Bytes(g_TotalCountAcircle,
                                           Encoder_RawPosition);
          dataHigh = CANFrame4_7Bytes(g_DriverBoardTemp,
                                      0,
                                      g_PosCtrlStep,
                                      g_bldc.Voltage_BUS);//,g_bldc.rot_dir_fbk/u8DrvDuty/10
          can_tx_id = CAN_MESSAGE_TXD_ID01;

          tx_seq++;
       }
       break;
       case 0x02:
       {
                dataLow  = CANFrame4_7Bytes(Current_Vphase.bytes_f[0],Current_Vphase.bytes_f[1],
                        Current_Vphase.bytes_f[2],Current_Vphase.bytes_f[3] );
                dataHigh = CANFrame_2ByteVariable_In4Bytes( (uint16)Avg_current_offset[1],
                       (uint16) Avg_current_offset[2] );//u8DrvDuty_Current,u8DrvDuty_Speed
                can_tx_id = CAN_MESSAGE_TXD_ID02;

                tx_seq++;
       }
       break;
       case 0x03:
          {
                   dataLow  = CANFrame_2ByteVariable_In4Bytes(g_DutyLimitMax,
                           REF_Speed);
                   dataHigh = CANFrame_2ByteVariable_In4Bytes(g_DutyStarup,
                             ref_current);//REF_Current
                   can_tx_id = CAN_MESSAGE_TXD_ID03;

                   tx_seq++;
          }
          break;
       case 0x04:
            {
               dataLow  = CANFrame4_7Bytes((uint8)Step_Offset_CW_Read,(uint8)Step_Offset_CCW_Read,
                       (uint8)Zero_Offset_CW_Read,(uint8)Zero_Offset_CCW_Read);
               dataHigh = CANFrame_2ByteVariable_In4Bytes(REF_Angle_Position,Actual_Angle_Position);
               can_tx_id = CAN_MESSAGE_TXD_ID04;
               tx_seq++;
            }
            break;
       case 0x05:
            {
               dataLow  = CANFrame_2ByteVariable_In4Bytes((uint16)SpeedKP_Read,(uint16)SpeedKI_Read);
               dataHigh = CANFrame_2ByteVariable_In4Bytes((uint16)CurrentKP_Read,(uint16)CurrentKI_Read);
               can_tx_id = CAN_MESSAGE_TXD_ID05;
               tx_seq++;
            }
            break;

       case 0x06:
            {
               dataLow  = CANFrame4_7Bytes((uint8)MotorTybe_Read,0,
                       0,0);
               dataHigh = CANFrame_2ByteVariable_In4Bytes((uint16)SpeedKD_Read,u8DrvDuty);
               can_tx_id = CAN_MESSAGE_TXD_ID06;
               tx_seq++;
             }
             break;
       case 0x07:
          {
              dataLow  = CANFrame4_7Bytes(Current_Uphase.bytes_f[0],Current_Uphase.bytes_f[1],
                       Current_Uphase.bytes_f[2],Current_Uphase.bytes_f[3] );
             dataHigh =CANFrame4_7Bytes(Current_Wphase.bytes_f[0],Current_Wphase.bytes_f[1],
                     Current_Wphase.bytes_f[2],Current_Wphase.bytes_f[3] );
             can_tx_id = CAN_MESSAGE_TXD_ID07;
             tx_seq =0x00;
           }
           break;


       default:
       {
          tx_seq = 0x00;
       }
       break;
   }

#else
#endif

   // if( IfxMultican_Status_notSentBusy != sendStatus)
    {
#if(CAN_PINMAP_MDA48VBLDC_CAN0)
    /* Invalidation of the RX message */
   IfxMultican_Message_init(&g_multican.rxSrcMsg,
                             CAN_MESSAGE_RXD_ID02,
                             INVALID_DATA_VALUE,
                             INVALID_DATA_VALUE,
                             IfxMultican_DataLengthCode_8);

    /* Initialization of the TX message */
    IfxMultican_Message_init(&g_multican.txSrcMsg,
                             can_tx_id,
                             dataLow,
                             dataHigh,
                             IfxMultican_DataLengthCode_8);

    debug_sendStatus=IfxMultican_Can_MsgObj_sendMessage(&g_multican.canSrcMsgObjTx, &g_multican.txSrcMsg);
#endif

#if(CAN_PINMAP_TC275LITE_KIT_CAN)
    IfxMultican_Message_init(&g_multican.rxDstMsg,
                              CAN_MESSAGE_RXD_ID01 ,
                                 INVALID_DATA_VALUE,
                                 INVALID_DATA_VALUE,
                                 IfxMultican_DataLengthCode_8);

        /* Initialization of the TX message */
        IfxMultican_Message_init(&g_multican.txDstMsg,
                                 can_tx_id,
                                 dataLow,
                                 dataHigh,
                                 IfxMultican_DataLengthCode_8);

        sendStatus=IfxMultican_Can_MsgObj_sendMessage(&g_multican.canDstMsgObjTx, &g_multican.txDstMsg);

#endif
    }

}

void Re_initMultican(void)
{
    if(debug_sendStatus != IfxMultican_Status_ok||canfd_sendStatus != IfxMultican_Status_ok)
    {
        initMultican();
    }
}
#endif

